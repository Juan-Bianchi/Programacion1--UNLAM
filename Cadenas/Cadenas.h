#ifndef CADENAS_H
#define CADENAS_H

#include <stdio.h>

int typedef (*Cmp)(const void* elem1, const void* elem2);

void* memchr_JUAN(const void* cadena, int caract, size_t cantCar);         //Localiza la primera aparición del carácter c (convertido a unsigned char) en los primeros n caracteres (cada uno interpretado como un unsigned char) del objeto apuntado por s. La función retorna un puntero al carácter localizado, o un puntero nulo si el carácter no apareció en el objeto.
int memcmp_JUAN(const void* cad1, const void* cad2, size_t cantCar);       //Compara los primeros n caracteres del objeto apuntado por s1 (interpretado como unsigned char) con los primeros n caracteres del objeto apuntado por s2 (interpretado como unsigned char). La función retorna un número entero mayor, igual, o menor que cero, apropiadamente según el objeto apuntado por s1 es mayor, igual, o menor que el objeto apuntado por s2.
void* memcpy_JUAN(void* cad1, const void* cad2, size_t cantCar);           //Copia los primeros n caracteres del objeto apuntado por s2 al objeto apuntado por s1. La función retorna el valor de s1. Si al copiar un objeto al otro se superponen, entonces el comportamiento no está definido.
void* memmove_JUAN(void* cad1, const void* cad2, size_t cantCar);          //Copia los primeros n caracteres del objeto apuntado por s2 al objeto apuntado por s1.Sin embargo, se asegura de que no estén superpuestos. Por esta razón, copia los caracteres a un array/arreglo temporalmente. Después vuelve a copiar del array temporal al objeto en cuestión. La función retorna el valor de s1.
void* memset_JUAN(void* cad, int caract, size_t cantCar);                  //Copia el valor de c (convertido a unsigned char) en cada uno de los primeros n caracteres en el objeto apuntado por s. La función retorna el valor de s1. Si la copia hace que los objetos se superpongan, entonces el comportamiento no está definido.
char* strcat_JUAN(char* cad1, const char* cad2);                           //Añade una copia de la cadena apuntada por s2 (incluyendo el carácter nulo) al final de la cadena apuntada por s1. El carácter inicial de s2 sobrescribe el carácter nulo al final de s1.
char* strchr_JUAN(char* cad, int caract);                                  //Localiza la primera aparición de c (convertido a unsigned char) en la cadena apuntada por s (incluyendo el carácter nulo). La función retorna un puntero a partir del carácter encontrado. Si no se ha encontrado el carácter, c, entonces retorna un puntero null.
int strcmp_JUAN(const char* cad1, const char* cad2);                       //Compara la cadena apuntada por s1 con la cadena apuntada por s2. La función retorna un número entero mayor, igual, o menor que cero, apropiadamente según la cadena apuntada por s1 es mayor, igual, o menor que la cadena apuntada por s2.
char* strcpy_JUAN(char* cad1, const char* cad2);                           //Copia la cadena apuntada por s2 (incluyendo el carácter nulo) a la cadena apuntada por s1. La función retorna el valor de s1. Si al copiar una cadena a la otra se superponen, entonces el comportamiento no está definido.
size_t strcspn_JUAN(const char* cad1, const char* cad2);                   //Cuenta el número de caracteres de una subcadena inicial apuntada por s1 que no contenga ninguno de los caracteres en la cadena apuntada por s2. La función retorna el número de caracteres leídos de la subcadena hasta que halla alguno de los caracteres de s2. El carácter nulo no se cuenta.
char* strerror_JUAN(int errnum);                                           //Convierte el número de error en errnum a un mensaje de error (una cadena de caracteres). La función retorna la cadena de caracteres conteniendo el mensaje asociado con el número de error. Esta conversión y el contenido del mensaje dependen de la implementación. La cadena no será modificada por el programa, pero sí puede ser sobrescrito con otra llamada a la misma función.
size_t strlen_JUAN(const char* cad);                                       //Calcula el número de caracteres de la cadena apuntada por s. La función retorna el número de caracteres hasta el carácter nulo, que no se incluye.
char* strncat_JUAN(char* cad1, const char* cad2, size_t cantCar);          //Añade no más de n caracteres (un carácter nulo y los demás caracteres siguientes no son añadidos) de la cadena apuntada por s2 al final de la cadena apuntada por s1. El carácter inicial de s2 sobrescribe el carácter nulo al final de s1. El carácter nulo siempre es añadido al resultado. La función retorna el valor de s1. Si la copia hace que los objetos se superpongan, entonces el comportamiento no está definido.
int strncmp_JUAN(const char* cad1, const char* cad2, size_t cantCar);      //Compara no más de n caracteres (caracteres posteriores al carácter nulo no se tienen en cuenta) de la cadena apuntada por s1 con la cadena apuntada por s2. La función retorna un número entero mayor, igual, o menor que cero, apropiadamente según la cadena apuntada por s1 es mayor, igual, o menor que la cadena apuntada por s2.
char* strncpy_JUAN(char* cad1, const char* cad2, size_t cantCar);          //Copia no más de n caracteres (caracteres posteriores al carácter nulo no son copiados) de la cadena apuntada por s2 a la cadena apuntada por s1. La función retorna el valor de s1. Si al copiar una cadena a la otra se superponen, entonces el comportamiento no está definido. Si el array/arreglo apuntado por s2 es una cadena que es más corta que n caracteres, entonces caracteres nulos son añadidos a la copia en el array apuntado por s1.
char* strpbrk_JUAN(const char* cad1, const char* cad2);                    //Localiza la primera aparición de la cadena apuntada por s1 de cualquier carácter de la cadena apuntada por s2. La función retorna un puntero al carácter, o un puntero nulo si ningún carácter de s2 apareció en s1.
char* strrchr_JUAN(char* cad, int cantCar);                                //Localiza la última aparición de c (convertido a unsigned char) en la cadena apuntada por s (incluyendo el carácter nulo). La función retorna un puntero a partir del carácter encontrado. Si no se ha encontrado el carácter, c, entonces retorna un puntero nulo.
size_t strspn_JUAN(const char* cad1, const char* cad2);                    //Calcula el número de caracteres de una subcadena inicial apuntada por s1 que consiste en todos los caracteres formados en la cadena apuntada por s2. La función retorna la longitud de esta subcadena.
char* strstr_JUAN(const char* cad1, const char* cad2);                     //Localiza la primera aparición en la cadena apuntada por s1 de la secuencia de caracteres (excluyendo el carácter nulo) en la cadena apuntada por s2. La función retorna un puntero a la cadena encontrada, o un puntero nulo si no se encontró la cadena. Si s2 apunta a una cadena de longitud cero, la función retorna s1.

#endif // CADENAS_H
